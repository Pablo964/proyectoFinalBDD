/*
A.1-MUESTRA LOS HÉROES CUYO DAÑO SEA MAYOR DE 20, TENGAN UNA 'A' EN EL
NOMBRE, Y LA LONGITUD DEL NOMBRE NO SEA MAYOR DE 10
*/
SELECT HE.NOMBRE_HEROE, HE.P_DANYO_HEROE
FROM HEROES HE
WHERE HE.NOMBRE_HEROE LIKE '%A%'
AND HE.P_DANYO_HEROE > 20
AND LENGTH(HE.NOMBRE_HEROE) < 10;


/*
A.2-MUESTRA LAS CUENTAS QUE SE HAYAN HECHO AMIGOS A PARTIR DE JUNIO DEL 
2018, A DEMÁS EL CORREO DEBE DE SER UN CORREO VÁLIDO Y DEBE CONTENER
UNA '@'
*/
SELECT *
FROM SER_AMIGOS AMI
WHERE TO_CHAR(AMI.FECHA_AMIGOS, 'YYYY') >= 2018
AND TO_CHAR(AMI.FECHA_AMIGOS, 'MM') >= 6
AND INSTR(AMI.EMAIL_AMIGO, '@') != 0
AND INSTR(AMI.EMAIL_CUENTA, '@') != 0;


/*
A.3-MUESTRA LAS GALERÍAS PUBLICAS DE 'MEJORES MOMENTOS'
*/
SELECT *
FROM GALERIA G
WHERE G.PUBLICA = 'S'
AND INSTR(G.NOMBRE_GALERIA, 'MEJORES MOMENTOS') != 0;


/*
A.4-MUESTRA LAS CUENTAS QUE NO TIENEN FECHA DE CREACION Y ADEMÁS EL 
NIVEL DE CUENTA ES MAYOR DE 1
*/
SELECT *
FROM CUENTA C
WHERE C.FECHA_CREACION IS NULL
AND C.NVL_CUENTA > 1;

/*
A.5-MUETRA TODAS LAS CARTAS QUE TIENE ASIGNADO EL USUARIO 
'MANUEH@HOTMAIL.COM' A SU HEROINA 'SPARROW'
*/
SELECT *
FROM ASIGNAR ASI
WHERE ASI.EMAIL_DESBLOQUEAR_ASIGNAR = 'MANUEH@HOTMAIL.COM'
AND ASI.NOMBRE_HEROE_ASIGNAR = 'SPARROW';


/*
B.1-ACTUALIZA LAS CUENTAS QUE NO TENGAN FECHA DE CREACION AL 01/01/2019
*/
UPDATE CUENTA C
SET C.FECHA_CREACION = '01/01/2019'
WHERE C.FECHA_CREACION IS NULL;


/*
B.2-ACTUALIZA EL HÉROE QUE MENOS DAÑO TENGA PARA QUE TENGA TANTO DAÑO
COMO EL HÉROE PERSONALIZADO QUE MÁS DAÑO TENGA DE LOS HÉROES
PERSONALIZADOS
*/
UPDATE HEROES H
SET H.P_DANYO_HEROE = (SELECT MAX(H.P_DANYO_HEROE)
                        FROM HEROES H, HEROE_PERSONALIZADO HP
                        WHERE H.NOMBRE_HEROE = HP.NOMBRE_HEROE_PERSON)
WHERE H.P_DANYO_HEROE = (SELECT MIN(H.P_DANYO_HEROE)
                            FROM HEROES HP);
                            
/*
B.3-BORRA LAS CARTAS QUE NO EXISTAN EN RECOMENDAR
*/
DELETE CARTAS C
WHERE NOT EXISTS (SELECT 1
                        FROM CARTAS C, RECOMENDAR REC
                        WHERE C.NOMBRE_CARTAS = REC.NOMBRE_CARTAS_RECOMENDAR);
                        
                        
/*
B.4-BORRA LAS CAPTURAS QUE NO EXISTAN EN NINGUNA GALERÍA
*/
DELETE CAPTURAS CA
WHERE NOT EXISTS(SELECT 1
                    FROM TENER_CAPTURAS TCA);
                    
                    
/*
C.1-MUESTRA EL NOMBRE DE LA GALERIA Y CUANTAS CAPTURAS TIENE
*/
SELECT G.NOMBRE_GALERIA, COUNT(*)
FROM GALERIA G, TENER_CAPTURAS CA
WHERE G.CODIGO_GALERIA = CA.CODIGO_GALERIA_TENER
GROUP BY G.NOMBRE_GALERIA;


/*
C.2-SACA EL NIVEL DE CUENTA DE LAS CUENTAS QUE HAYAN DESBLOQUEADO
DOS GEMAS O MÁS
*/
SELECT C.NVL_CUENTA
FROM CUENTA C, DESBLOQUEAR D
WHERE C.EMAIL = D.EMAIL_DESBLOQUEAR
AND (SELECT COUNT(*)
        FROM DESBLOQUEAR D, CUENTA C
        WHERE C.EMAIL = D.EMAIL_DESBLOQUEAR) > 2;


/*
C.3-MUESTRA LA CANTIDAD DE COMBINACIONES GEMAS-CARTAS QUE TIENEN
ASIGNADAS LOS HÉROES Y LOS HÉROES QUE NO TENGAN NINGUNA ASIGNADA
TAMBIÉN DEBE SALIR PERO DEBE PONER 'NO ASIGNADO'
*/
SELECT H.NOMBRE_HEROE, DECODE(
                        COUNT(ASI.NOMBRE_HEROE_ASIGNAR),0,'NO ASIGNADO',
                        COUNT(ASI.NOMBRE_HEROE_ASIGNAR)) CANTIDAD_ASIG
FROM HEROES H, ASIGNAR ASI
WHERE H.NOMBRE_HEROE = ASI.NOMBRE_HEROE_ASIGNAR(+)
GROUP BY H.NOMBRE_HEROE;


/*
D.1-MUESTRA LAS CUENTAS QUE TENGAN DESBLOQUEADOS DOS O MAS OBJETOS Y QUE TENGAN
TENGAN DOS HÉROES O MAS ADEMÁS ESTAS CUENTAS SE HAN TENIDO QUE CREAR 
DURANTE EL 2018
*/
SELECT DES.EMAIL_DESBLOQUEAR
FROM DESBLOQUEAR DES, CUENTA C
WHERE DES.EMAIL_DESBLOQUEAR = C.EMAIL
AND TO_CHAR(C.FECHA_CREACION, 'YYYY') = 2018
GROUP BY DES.EMAIL_DESBLOQUEAR
HAVING COUNT(*) >= 2
INTERSECT
SELECT H.EMAIL_CUENTA_TENER
FROM TENER_HEROES H, CUENTA C
WHERE C.EMAIL = H.EMAIL_CUENTA_TENER
AND TO_CHAR(C.FECHA_CREACION, 'YYYY') = 2018
GROUP BY H.EMAIL_CUENTA_TENER
HAVING COUNT(*) >= 2;


/*
D.2-MUESTRA CUENTAS QUE TENGAN MAGOS Y ADEMÁS ESOS MAGOS TIENEN QUE 
TENER HABILIDADES ESPECIALES O MUESTRA LAS CUENTAS QUE TENGAN HÉROES
CON MÁS DE 20 PUNTOS DE VELOCIDAD
*/
SELECT C.NOMBRE
FROM CUENTA C, TENER_HEROES T, HEROES H, MAGOS M, 
    HABILIDADES_ESPECIALES ESP
WHERE C.EMAIL = T.EMAIL_CUENTA_TENER
AND T.NOMBRE_HEROE_TENER = H.NOMBRE_HEROE
AND H.NOMBRE_HEROE = M.NOMBRE_HEROE_MAGO
AND M.NOMBRE_HEROE_MAGO = ESP.NOMBRE_HEROE_HABILIDAD
UNION
SELECT C.NOMBRE
FROM CUENTA C, TENER_HEROES TH, HEROES H
WHERE C.EMAIL = TH.EMAIL_CUENTA_TENER
AND TH.NOMBRE_HEROE_TENER = H.NOMBRE_HEROE
AND H.P_VELOCIDAD_HEROE > 20;


/*
D.3-MUESTRA LAS CUENTAS QUE HAYAN DESBLOQUEADO MÍNIMO UNA CARTA Y 
UNA GEMA Y QUE NO TENGA UNA GALERÍA DE IMÁGENES
*/
SELECT C.NOMBRE
FROM CUENTA C, DESBLOQUEAR DES
WHERE C.EMAIL = DES.EMAIL_DESBLOQUEAR
GROUP BY C.NOMBRE
HAVING COUNT(*) > 0
MINUS
SELECT C.NOMBRE
FROM CUENTA C, GALERIA G
WHERE C.EMAIL = G.EMAIL_CUENTA_GALERIA
GROUP BY C.NOMBRE;


/*
E.1-SACA EL TOTAL DE CADA GEMA QUE HAN DESBLOQUEADO LOS USUARIOS
AGRUPANDO POR EL CÓDIGO SIEMPRE QUE EL JUGADOR QUE LAS HAYA
DESBLOQUEADO TENGA UN NIVEL DE CUENTA MAYOR QUE 2, Y EL TIPO DE
LA GEMA SEA 'FUEGO'
*/
SELECT DES.CODIGO_GEMAS_DESBLOQUEAR COD_GEMA, COUNT(*) VECES_DESBL
FROM DESBLOQUEAR DES, CUENTA C, GEMAS G
WHERE C.EMAIL = DES.EMAIL_DESBLOQUEAR
AND G.CODIGO_GEMAS = DES.CODIGO_GEMAS_DESBLOQUEAR
AND G.TIPO = 'FUEGO'
AND C.NVL_CUENTA > 2
GROUP BY DES.CODIGO_GEMAS_DESBLOQUEAR;

/*
E.2-QUEREMOS PREMIAR A NUESTRO MEJOR JUGADOR Y PARA SABER QUIÉN ES
DEBEMOS SABER QUIÉN ES EL QUE TIENE MÁS HÉROES, NIVEL, GEMAS Y CARTAS,
Y GALERÍAS.
*/
SELECT C.NOMBRE
FROM CUENTA C, TENER_HEROES TH
WHERE C.EMAIL = TH.EMAIL_CUENTA_TENER
GROUP BY C.NOMBRE
HAVING COUNT(*) = (SELECT MAX(COUNT(*))
                    FROM CUENTA C, TENER_HEROES TH
                    WHERE C.EMAIL = TH.EMAIL_CUENTA_TENER
                    GROUP BY C.NOMBRE)
INTERSECT
SELECT C.NOMBRE
FROM CUENTA C
WHERE C.NVL_CUENTA = (SELECT MAX(NVL_CUENTA)
                    FROM CUENTA C)
INTERSECT
SELECT C.NOMBRE
FROM CUENTA C, DESBLOQUEAR DES
WHERE C.EMAIL = DES.EMAIL_DESBLOQUEAR  
GROUP BY C.NOMBRE
HAVING COUNT(*) = (SELECT MAX(COUNT(*))
                    FROM CUENTA C, DESBLOQUEAR DES
                    WHERE C.EMAIL = DES.EMAIL_DESBLOQUEAR  
                    GROUP BY C.NOMBRE)
INTERSECT
SELECT C.NOMBRE
FROM CUENTA C, GALERIA G
WHERE C.EMAIL = G.EMAIL_CUENTA_GALERIA
GROUP BY C.NOMBRE
HAVING COUNT(*) = (SELECT MAX(COUNT(*))
                    FROM CUENTA C, GALERIA G
                    WHERE C.EMAIL = G.EMAIL_CUENTA_GALERIA
                    GROUP BY C.NOMBRE);
/*
F.1-SACA LA CUENTA QUE TENGA LA GALERÍA CON MÁS CAPTURAS
*/
SELECT C.EMAIL
FROM CUENTA C, GALERIA G, TENER_CAPTURAS TCA, CAPTURAS CAP
WHERE C.EMAIL = G.EMAIL_CUENTA_GALERIA
AND G.CODIGO_GALERIA = TCA.CODIGO_GALERIA_TENER
AND TCA.CODIGO_CAPTURAS_TENER = CAP.CODIGO_CAPTURAS
GROUP BY C.EMAIL
HAVING COUNT(CAP.CODIGO_CAPTURAS) = (SELECT 
                                        MAX(COUNT(CAP.CODIGO_CAPTURAS))
                                        FROM CAPTURAS CAP, GALERIA G,
                                        TENER_CAPTURAS TCA
                                        WHERE G.CODIGO_GALERIA = 
                                        TCA.CODIGO_GALERIA_TENER
                                        AND TCA.CODIGO_CAPTURAS_TENER = 
                                        CAP.CODIGO_CAPTURAS
                                        GROUP BY CAP.CODIGO_CAPTURAS);
/*
F.2-QUEREMOS SABER SI EL TIEMPO QUE LE DEDICAN LOS JUGADORES ESTA
RELACCIONADO CON LA CANTIDAD DE AMIGOS QUE TIENEN, Y ASÍ SI 
ESTÁ RELACCIÓNADO, PODER DAR FACILIDADES A LOS JUGADORES
PARA HACER AMIGOS Y ASÍ QUE LE DEDIQUEN MÁS TIEMPO AL JUEGO.
LA SELECT MUESTRA LA CUENTA CON MÁS AMIGOS Y QUE TENGA EL MAYOR 
NIVEL NIVEL DE CUENTA
*/
SELECT C.EMAIL
FROM CUENTA C, SER_AMIGOS AM
WHERE C.EMAIL = AM.EMAIL_CUENTA
AND C.NVL_CUENTA = (SELECT MAX(NVL_CUENTA)
                    FROM CUENTA C)
GROUP BY C.EMAIL
HAVING COUNT(*) = (SELECT MAX(COUNT(*))
                    FROM CUENTA C, SER_AMIGOS AM
                    WHERE C.EMAIL = AM.EMAIL_CUENTA
                    AND C.NVL_CUENTA = (SELECT MAX(NVL_CUENTA)
                                        FROM CUENTA C)
                    GROUP BY C.EMAIL);
                    
/*
G.1-SACA LOS HÉROES QUE SE LES HA ASIGNADO  UNA CARTA SIEMPRE QUE LA
CUENTA QUE LA HA ASIGNADO TENGA MÁS DE NIVEL 2 Y SACA EL NIVEL
Y AL HÉROE SE LE HAYAN ASIGNADO MÁS DE DOS CARTAS Y AGRUPANDO POR
NIVEL DE CUENTA. 
*/
SELECT ASI.NOMBRE_HEROE_ASIGNAR NOMRE, (SELECT C.NVL_CUENTA
                                        FROM CUENTA C, ASIGNAR ASI
                                        WHERE C.EMAIL = 
                                        ASI.EMAIL_DESBLOQUEAR_ASIGNAR
                                        GROUP BY C.NVL_CUENTA) NIVEL
FROM ASIGNAR ASI
GROUP BY ASI.NOMBRE_HEROE_ASIGNAR;

/*
G.2-SACA LAS CUENTAS QUE MÁS CAPTURAS TENGA O QUE MÁS GALERÍAS TENGA
*/
SELECT C.EMAIL
FROM CUENTA C, CAPTURAS CA
WHERE C.EMAIL = CA.EMAIL_CUENTA_CAPTURAS
GROUP BY C.EMAIL
HAVING COUNT(*) = (SELECT MAX(COUNT(*))
                    FROM CUENTA C, CAPTURAS CA
                    WHERE C.EMAIL = CA.EMAIL_CUENTA_CAPTURAS
                    GROUP BY C.EMAIL)
UNION
SELECT C.EMAIL
FROM CUENTA C, GALERIA G
WHERE C.EMAIL = G.EMAIL_CUENTA_GALERIA
GROUP BY C.EMAIL
HAVING COUNT(*) = (SELECT MAX(COUNT(*))
                    FROM CUENTA C, GALERIA G
                    WHERE C.EMAIL = G.EMAIL_CUENTA_GALERIA
                    GROUP BY C.EMAIL);
                    
/*
H.1-ACTUALIZA EL NIVEL DE CUENTA DE LAS CUENTAS QUE TENGAN DOS
HÉROES
*/
UPDATE CUENTA C
SET C.NVL_CUENTA = 30
WHERE 2 IN (SELECT COUNT(*)
        FROM CUENTA C, TENER_HEROES TH
        WHERE C.EMAIL = TH.EMAIL_CUENTA_TENER
        GROUP BY C.NOMBRE);
        
/*
H.2-ACTUALIZA LOS PUNTOS DE DAÑO DE LOS HÉROES QUE SON USADOS POR MÁS 
DE UNA PERSONA
*/
UPDATE HEROES H
SET H.P_DANYO_HEROE = 100
WHERE 1 > ANY (SELECT COUNT(*)
                FROM CUENTA C, HEROES H, TENER_HEROES TH
                WHERE C.EMAIL = TH.EMAIL_CUENTA_TENER
                AND H.NOMBRE_HEROE = TH.NOMBRE_HEROE_TENER
                GROUP BY C.EMAIL);
                
/*
H.3-ACTUALIZA LOS PUNTOS DE CURA DE LAS HABILIDADES ESPECIALES
PARA QUE TENGAN LOS MISMOS PUNTOS QUE EL NIVEL DE LA CUENTA CON
MÁS NIVEL SIEMPRE Y CUANDO ESAS HABILIDADES TENGAN MENOS DE 50 PUNTOS
*/
UPDATE HABILIDADES_ESPECIALES HE
SET HE.P_CURA_HABILIDAD = (SELECT C.NVL_CUENTA
                            FROM CUENTA C
                            WHERE C.NVL_CUENTA =(SELECT MAX(C.NVL_CUENTA)
                                                   FROM CUENTA C))
WHERE HE.P_CURA_HABILIDAD < 50;


/*
J.1-CREA UNA VISTA QUE GUARDA LAS CUENTAS CON HÉROES PERSONALIZADOS
Y SUS NOMBRES
*/
CREATE OR REPLACE VIEW CUENTAS_CON_H_PERSON
AS 
SELECT C.NOMBRE, HP.NOMBRE_HEROE_PERSON
FROM CUENTA C, HEROE_PERSONALIZADO HP
WHERE C.EMAIL = HP.EMAIL_CUENTA_HEROE_PERSON;
    
    
/*
J.2-CREA UNA VISTA QUE MUESTRA LA CANTIDAD DE GEMAS QUE TIENE UNA CUENTA,
LA CANTIDAD DE CARTAS, Y LA CANTIDAD DE HÉROES
*/
CREATE OR REPLACE VIEW OBJETOS_Y_HEROES
AS
SELECT C.NOMBRE, (SELECT COUNT(*)
                    FROM CUENTA C2, DESBLOQUEAR DES
                    WHERE C2.EMAIL = DES.EMAIL_DESBLOQUEAR)CANTIDAD_CARTAS_GEMAS,
                    (SELECT COUNT(*)
                        FROM CUENTA C2, TENER_HEROES TH
                        WHERE C2.EMAIL = TH.EMAIL_CUENTA_TENER)CANTIDAD_HEROES
                    
FROM CUENTA C
GROUP BY C.NOMBRE;
